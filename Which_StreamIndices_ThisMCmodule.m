function StreamIndices = Which_StreamIndices_ThisMCmodule(Modules, m, format)

% FUNCTION StreamIndices = Which_StreamIndices_ThisMCmodule(Modules, N)
% This function takes as input: i) a vector Modules of size N^2 - N, giving
% the module label associated to a MC row (from a module structure extracted
% from a MC matrix generated by dFCstream2MC function)
% ii) the label m of the module to seek for, i.e. an integer between 1 and max(Modules)
% iii) The argument format decides whether the output is a 2D link table ([i,j] format =
% 'table', for 3D dFCstreams; or default, 'stream', i.e. vector of edge numbers in stream format,
% for 2D dFCstreams)



if (nargin < 2)
    disp('You should provide minimum as inputs a Modules vector and a target module label m, and a number of regions')
    return
end
if (nargin < 3)
    format = 'stream';
end

M=length(Modules);
nregions = (1 + sqrt(1+4*M))/2;

if (length(Modules) ~= nregions*(nregions-1))
    disp('Careful! The Modules vector you provided is not compatible with the given number of regions!')
    return
end

dFCstream = ones(M/2,1);
MC = ones(M);

wom = find(Modules == m);
TableLinks = zeros(length(wom), 2);
k = 0;
for l = 1:length(wom)
    k=k+1;
    ll = wom(l);
    lonk = Which_Link_ThisMCIndex(ll,MC);
    TableLinks(k,1) = lonk(1);
    TableLinks(k,2) = lonk(2);
    clear lonk
end
if (strcmp(format, 'table'))
    TableLinks = TableLinks(find(TableLinks(:,2) > TableLinks(:,1)),:);
    StreamIndices = TableLinks;
    return
end
if (strcmp(format, 'stream'))
    
    StreamIndices = zeros(size(TableLinks,1),1);
    for k = 1:length(wom)
        if (TableLinks(k,1) < TableLinks(k,2))
            StreamIndices(k) = Which_StreamIndex_ThisLink(TableLinks(k,1), TableLinks(k,2), dFCstream);
        else
            StreamIndices(k) = Which_StreamIndex_ThisLink(TableLinks(k,2), TableLinks(k,1), dFCstream);
            
        end
    end
    StreamIndices = setdiff(unique(StreamIndices),0);
else
    disp('Invalid format!')
    return
end
function MC = dFCstream2MC(dFCstream, verbose)

% FUNCTION MC = dFCstream2MC(dFCstream, [verbose])
% Thus function takes as input a dFCstream, either 3D or 2D,
% and outputs a square MC matrix (in a redundant form to find more easily
% meta-links impinging a region
% NB: Set optional argument 'verbose' to zero for silencing outputs, or to 2
% for even more outputs.
%
% inputs: dFCstream --> generated by TS2dFCstream (2D or 3D)
%         verbose   --> 0 silencing output
%                       1 (default) displaying output
%
% Example: mc = dFCstream2MC(dFCstream, 0)

if (nargin == 1)
    verbose = 1;
end

if (ndims(dFCstream) == 3)
    FCstr = Matrix2Vec(dFCstream);
end

if (ndims(dFCstream) == 2)
    FCstr = dFCstream;
end

if (ndims(dFCstream) < 2)
    disp('Provide a valid size dFCstream (3D or stream objects)!')
    return
end

if (ndims(dFCstream) > 3)
    disp('Provide a valid size dFCstream (3D or stream objects)!')
    return
end

% Now FCstr is a stream 2D object
% Preallocate MC matrix

M = size(FCstr,1);
nregions = (1 + sqrt(1+8*M))/2;
MCsize = nregions * (nregions-1);
MC = -5*ones(MCsize, MCsize);
if (verbose)
    disp('     Computing naked MC entries...')
end
MCsmall = ones(M,M);
for l_1 = 1:(M-1)
    for l_2 = (l_1+1):M
        MCsmall(l_1, l_2) = corr(FCstr(l_1, :)', FCstr(l_2, :)');
    end
    if (mod(l_1, 200) == 0)
        disp(['     ... ', num2str(l_1), ' out of ', num2str(M)])
    end
end
if (verbose)
    disp('     Computed!')
    disp('     Redispaching entries...')
end
for i = 1:nregions
    for j = 1:(i-1)
        % j < i
        l_1 = Which_StreamIndex_ThisLink(j,i, MCsmall);
        MCIndex_1 = Which_MCIndex_ThisLink(i,j, MC);
        for k = 1:nregions
            for l = 1:(k-1)
                % l < k
                l_2 = Which_StreamIndex_ThisLink(l,k, MCsmall);
                MCIndex_2 = Which_MCIndex_ThisLink(k,l, MC);
                MC(MCIndex_1, MCIndex_2) = 1;
                if (l_1 < l_2)
                    MC(MCIndex_1, MCIndex_2) = MCsmall(l_1, l_2);
                end
                if (l_1 > l_2)
                    MC(MCIndex_1, MCIndex_2) = MCsmall(l_2, l_1);
                end
            end
            for l = (k+1):nregions
                % k < l
                l_2 = Which_StreamIndex_ThisLink(k,l, MCsmall);
                MCIndex_2 = Which_MCIndex_ThisLink(k,l, MC);
                MC(MCIndex_1, MCIndex_2) = 1;
                if (l_1 < l_2)
                    MC(MCIndex_1, MCIndex_2) = MCsmall(l_1, l_2);
                end
                if (l_1 > l_2)
                    MC(MCIndex_1, MCIndex_2) = MCsmall(l_2, l_1);
                end
            end
        end
        if (verbose > 1)
            disp(['     [', num2str(i), ', ', num2str(j), ']'])
        end
    end
    
    for j = (i+1):nregions
        % i < j
        l_1 = Which_StreamIndex_ThisLink(i,j, MCsmall);
        MCIndex_1 = Which_MCIndex_ThisLink(i,j, MC);
        for k = 1:nregions
            for l = 1:(k-1)
                % l < k
                l_2 = Which_StreamIndex_ThisLink(l,k, MCsmall);
                MCIndex_2 = Which_MCIndex_ThisLink(k,l, MC);
                MC(MCIndex_1, MCIndex_2) = 1;
                if (l_1 < l_2)
                    MC(MCIndex_1, MCIndex_2) = MCsmall(l_1, l_2);
                end
                if (l_1 > l_2)
                    MC(MCIndex_1, MCIndex_2) = MCsmall(l_2, l_1);
                end
            end
            for l = (k+1):nregions
                % k < l
                l_2 = Which_StreamIndex_ThisLink(k,l, MCsmall);
                MCIndex_2 = Which_MCIndex_ThisLink(k,l, MC);
                MC(MCIndex_1, MCIndex_2) = 1;
                if (l_1 < l_2)
                    MC(MCIndex_1, MCIndex_2) = MCsmall(l_1, l_2);
                end
                if (l_1 > l_2)
                    MC(MCIndex_1, MCIndex_2) = MCsmall(l_2, l_1);
                end
            end
        end
        if (verbose > 1)
            disp(['     [', num2str(i), ', ', num2str(j), ']'])
        end
    end
    if (verbose)
        disp(['     ... region ', num2str(i)])
    end
end
    
